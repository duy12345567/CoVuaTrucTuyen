const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const { Chess } = require("chess.js");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: { origin: "*" }, // Cho ph√©p k·∫øt n·ªëi t·ª´ m·ªçi ngu·ªìn (n√™n gi·ªõi h·∫°n trong production)
});

const rooms = {}; // L∆∞u tr·ªØ th√¥ng tin c√°c ph√≤ng ch∆°i trong b·ªô nh·ªõ
const matchQueue = []; // H√†ng ƒë·ª£i t√¨m tr·∫≠n
const REJOIN_TIMEOUT = 60000; // Th·ªùi gian ch·ªù k·∫øt n·ªëi l·∫°i (60 gi√¢y)
const INITIAL_TIME = 900; // Th·ªùi gian ban ƒë·∫ßu m·ªói ng∆∞·ªùi ch∆°i (gi√¢y) - 15 ph√∫t

// --- Helper Functions for Timer ---

// D·ª´ng timer cho ph√≤ng v√† t√≠nh to√°n th·ªùi gian cu·ªëi c√πng
function stopPlayerTimer(roomId) {
    const room = rooms[roomId];
    if (!room) return;

    // D·ª´ng interval hi·ªán t·∫°i n·∫øu ƒëang ch·∫°y
    if (room.timerIntervalId) {
        clearInterval(room.timerIntervalId);
        room.timerIntervalId = null;
        console.log(`[${roomId}] Timer interval cleared by stopPlayerTimer.`);
    }

    // T√≠nh to√°n v√† c·∫≠p nh·∫≠t th·ªùi gian ch√≠nh x√°c khi d·ª´ng (d·ª±a tr√™n th·ªùi gian b·∫Øt ƒë·∫ßu l∆∞·ª£t)
    const now = Date.now();
    if (room.turnStartTime && room.turn) { // Ch·ªâ t√≠nh n·∫øu l∆∞·ª£t ƒë√£ b·∫Øt ƒë·∫ßu v√† c√≥ ng∆∞·ªùi ƒëang ƒë·∫øn l∆∞·ª£t
        const elapsedThisTurn = (now - room.turnStartTime) / 1000; // Gi√¢y
        const currentPlayer = room.players.find(p => p.id === room.turn); // T√¨m ng∆∞·ªùi ch∆°i c√≥ l∆∞·ª£t

        if (currentPlayer) {
            if (currentPlayer.color === 'white') {
                // C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i
                room.whiteTime = Math.max(0, room.initialWhiteTime - elapsedThisTurn);
                // C·∫≠p nh·∫≠t th·ªùi gian g·ªëc cho l∆∞·ª£t sau (ho·∫∑c gi·ªØ nguy√™n n·∫øu game over)
                room.initialWhiteTime = room.whiteTime;
            } else {
                room.blackTime = Math.max(0, room.initialBlackTime - elapsedThisTurn);
                room.initialBlackTime = room.blackTime;
            }
             console.log(`[${roomId}] Timer stopped for ${room.turn}. Exact time left: W=${room.whiteTime.toFixed(1)}s, B=${room.blackTime.toFixed(1)}s`);
        }
    }
    room.turnStartTime = null; // Reset th·ªùi gian b·∫Øt ƒë·∫ßu l∆∞·ª£t
}

// B·∫Øt ƒë·∫ßu timer cho ng∆∞·ªùi ch∆°i ƒëang c√≥ l∆∞·ª£t trong ph√≤ng
function startPlayerTimer(roomId) {
    const room = rooms[roomId];
    // C√°c ƒëi·ªÅu ki·ªán kh√¥ng b·∫Øt ƒë·∫ßu timer
    if (!room || room.timerIntervalId || room.game.isGameOver() || !room.turn) {
         console.log(`[${roomId}] Timer start prevented: Room invalid, timer exists, game over, or no turn.`);
        return;
    }

    // T√¨m ng∆∞·ªùi ch∆°i hi·ªán t·∫°i v√† ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
    const currentPlayer = room.players.find(p => p.id === room.turn);
    if (!currentPlayer || currentPlayer.status !== 'connected') {
        console.log(`[${roomId}] Timer not started: Player ${room.turn} is not connected.`);
        return;
    }
    // T√¨m ƒë·ªëi th·ªß v√† ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi (th∆∞·ªùng kh√¥ng c·∫ßn timer n·∫øu ƒë·ªëi th·ªß disconnect)
     const opponent = room.players.find(p => p.id !== room.turn);
     if (!opponent || opponent.status !== 'connected') {
         console.log(`[${roomId}] Timer not started: Opponent ${opponent?.id} is not connected.`);
         return;
     }


    // ƒê·∫∑t th·ªùi gian b·∫Øt ƒë·∫ßu l∆∞·ª£t v√† kh·ªüi ch·∫°y interval
    room.turnStartTime = Date.now();
    console.log(`[${roomId}] Timer starting for ${room.turn} (Color: ${currentPlayer.color}) at ${room.turnStartTime}. Initial time for turn: ${currentPlayer.color === 'white' ? room.initialWhiteTime.toFixed(1) : room.initialBlackTime.toFixed(1)}s`);

    room.timerIntervalId = setInterval(() => {
        const currentRoom = rooms[roomId]; // L·∫•y tr·∫°ng th√°i ph√≤ng m·ªõi nh·∫•t b√™n trong interval

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán d·ª´ng interval
        if (!currentRoom || currentRoom.game.isGameOver() || !currentRoom.turn || currentRoom.timerIntervalId !== room.timerIntervalId) { // Ki·ªÉm tra ID ƒë·ªÉ tr√°nh interval c≈© ch·∫°y
            if(currentRoom && currentRoom.timerIntervalId) { // Ch·ªâ clear n·∫øu ID kh·ªõp
                 clearInterval(currentRoom.timerIntervalId);
                 currentRoom.timerIntervalId = null; // Quan tr·ªçng: ƒë·∫∑t l·∫°i ID
                 console.log(`[${roomId}] Timer interval ${room.timerIntervalId} cleared (game over, no turn, or new timer started).`);
            } else if (!currentRoom) {
                 console.log(`[${roomId}] Timer interval could not be cleared: Room gone.`);
            }
            return; // D·ª´ng interval n√†y
        }

        const now = Date.now();
        // T√≠nh th·ªùi gian tr√¥i qua k·ªÉ t·ª´ ƒë·∫ßu l∆∞·ª£t
        const elapsedThisTurn = (now - currentRoom.turnStartTime) / 1000;
        let timeToUpdate = 0; // Th·ªùi gian c√≤n l·∫°i c·ªßa ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
        let isTimeout = false;

        // C·∫≠p nh·∫≠t th·ªùi gian d·ª±a tr√™n ng∆∞·ªùi c√≥ l∆∞·ª£t
        if (currentRoom.turn === currentRoom.players[0].id) { // L∆∞·ª£t Tr·∫Øng
            currentRoom.whiteTime = Math.max(0, currentRoom.initialWhiteTime - elapsedThisTurn);
            timeToUpdate = currentRoom.whiteTime;
        } else { // L∆∞·ª£t ƒêen
            currentRoom.blackTime = Math.max(0, currentRoom.initialBlackTime - elapsedThisTurn);
            timeToUpdate = currentRoom.blackTime;
        }

        // G·ª≠i c·∫≠p nh·∫≠t cho clients
        io.to(roomId).emit("timerUpdate", {
            whiteTime: currentRoom.whiteTime,
            blackTime: currentRoom.blackTime,
        });

        // Ki·ªÉm tra h·∫øt gi·ªù
        if (timeToUpdate <= 0) {
            isTimeout = true;
            const loserId = currentRoom.turn;
            const winnerId = currentRoom.players.find(p => p.id !== loserId)?.id;

            console.log(`[${roomId}] Timer ended for ${loserId}. Winner: ${winnerId}`);
            io.to(roomId).emit("gameOver", {
                result: "win",
                winner: winnerId,
                loser: loserId,
                reason: "timeout",
                message: `Ng∆∞·ªùi ch∆°i ${winnerId || 'Kh√¥ng x√°c ƒë·ªãnh'} th·∫Øng do ${loserId} h·∫øt th·ªùi gian!`,
            });

            stopPlayerTimer(roomId); // D·ª´ng v√† t√≠nh to√°n th·ªùi gian cu·ªëi c√πng
        }

    }, 1000); // Ch·∫°y m·ªói gi√¢y
}

// --- Socket Handlers ---

io.on("connection", (socket) => {
    console.log(`üü¢ Ng∆∞·ªùi ch∆°i ƒë√£ k·∫øt n·ªëi: ${socket.id}`);

    // --- Matchmaking ---
    socket.on("startMatch", () => {
        console.log(`üë§ Ng∆∞·ªùi ch∆°i ${socket.id} b·∫Øt ƒë·∫ßu t√¨m tr·∫≠n`);
        if (matchQueue.some(player => player.id === socket.id) || Object.values(rooms).some(room => room.players.some(p => p.currentSocketId === socket.id && p.status === 'connected'))) {
             console.log(`[${socket.id}] Already in queue or active game.`);
             return; // Tr√°nh th√™m ng∆∞·ªùi ch∆°i ƒë√£ c√≥ trong h√†ng ƒë·ª£i ho·∫∑c ƒëang ch∆°i
        }
        matchQueue.push(socket);

        if (matchQueue.length >= 2) {
            const player1Socket = matchQueue.shift();
            const player2Socket = matchQueue.shift();
            // Ki·ªÉm tra xem socket c√≤n k·∫øt n·ªëi kh√¥ng tr∆∞·ªõc khi t·∫°o ph√≤ng
            if (!player1Socket.connected || !player2Socket.connected) {
                 console.error("One or both players disconnected before match could start. Returning remaining player to queue.");
                 if (player1Socket.connected) matchQueue.unshift(player1Socket);
                 if (player2Socket.connected) matchQueue.unshift(player2Socket);
                 return;
            }

            const roomId = `room_${Date.now()}`;
            const player1 = { id: player1Socket.id, currentSocketId: player1Socket.id, color: 'white', status: 'connected' };
            const player2 = { id: player2Socket.id, currentSocketId: player2Socket.id, color: 'black', status: 'connected' };

            rooms[roomId] = {
                roomId: roomId, // Th√™m ID ph√≤ng v√†o object room ƒë·ªÉ d·ªÖ truy c·∫≠p
                players: [player1, player2],
                game: new Chess(),
                history: [],
                turn: player1.id, // Tr·∫Øng ƒëi tr∆∞·ªõc
                whiteTime: INITIAL_TIME, blackTime: INITIAL_TIME,
                initialWhiteTime: INITIAL_TIME, initialBlackTime: INITIAL_TIME, // Th·ªùi gian g·ªëc khi b·∫Øt ƒë·∫ßu l∆∞·ª£t
                turnStartTime: null,
                timerIntervalId: null,
                rejoinTimeoutId: {}, // { playerId: timeoutId }
                playerStatus: { [player1.id]: 'connected', [player2.id]: 'connected' },
                disconnectTime: {} // { playerId: timestamp }
            };

            player1Socket.join(roomId);
            player2Socket.join(roomId);
            console.log(`üéâ Gh√©p c·∫∑p th√†nh c√¥ng! Ph√≤ng ${roomId}: ${player1.id} (Tr·∫Øng) vs ${player2.id} (ƒêen)`);

            // G·ª≠i th√¥ng tin b·∫Øt ƒë·∫ßu game cho t·ª´ng ng∆∞·ªùi
            player1Socket.emit("gameStart", { color: player1.color, turn: rooms[roomId].turn, roomId, playerToken: player1.id, whiteTime: INITIAL_TIME, blackTime: INITIAL_TIME });
            player2Socket.emit("gameStart", { color: player2.color, turn: rooms[roomId].turn, roomId, playerToken: player2.id, whiteTime: INITIAL_TIME, blackTime: INITIAL_TIME });

            startPlayerTimer(roomId); // B·∫Øt ƒë·∫ßu timer cho Tr·∫Øng
        }
    });

    socket.on("cancelMatch", () => {
        console.log(`üë§ Ng∆∞·ªùi ch∆°i ${socket.id} h·ªßy t√¨m tr·∫≠n`);
        const index = matchQueue.findIndex(player => player.id === socket.id);
        if (index !== -1) {
            matchQueue.splice(index, 1);
            console.log(`[${socket.id}] Removed from queue.`);
        }
    });

    // --- Game Actions ---
    socket.on("move", ({ roomId, move }) => {
        const room = rooms[roomId];
        if (!room) { console.error(`[${roomId}] Ph√≤ng kh√¥ng t·ªìn t·∫°i khi nh·∫≠n n∆∞·ªõc ƒëi.`); return; }
        if (room.game.isGameOver()) { console.warn(`[${roomId}] Nh·∫≠n n∆∞·ªõc ƒëi khi game ƒë√£ k·∫øt th√∫c.`); return; }

        const player = room.players.find(p => p.currentSocketId === socket.id);
        if (!player) { console.error(`[${roomId}] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i ${socket.id} trong ph√≤ng.`); return; }
        if (player.id !== room.turn) { console.warn(`[${roomId}] ${player.id} ƒëi sai l∆∞·ª£t (l∆∞·ª£t c·ªßa ${room.turn}).`); return; }

        const opponent = room.players.find(p => p.id !== player.id);
        if (opponent && opponent.status === 'disconnected') {
             console.warn(`[${roomId}] ${player.id} c·ªë ƒëi khi ${opponent.id} ƒëang disconnected.`);
             socket.emit("opponentStillDisconnected", { message: "ƒê·ªëi th·ªß ƒëang t·∫°m th·ªùi ng·∫Øt k·∫øt n·ªëi, vui l√≤ng ƒë·ª£i." });
             return;
         }

        console.log(`[${roomId}] N∆∞·ªõc ƒëi nh·∫≠n t·ª´ ${player.id}: ${JSON.stringify(move)}, FEN tr∆∞·ªõc: ${room.game.fen()}`);

        // D·ª´ng timer ng∆∞·ªùi ch∆°i hi·ªán t·∫°i TR∆Ø·ªöC khi th·ª±c hi·ªán n∆∞·ªõc ƒëi
        stopPlayerTimer(roomId);

        const game = room.game;
        const validMoveResult = game.move(move); // Th·ª≠ th·ª±c hi·ªán n∆∞·ªõc ƒëi

        if (validMoveResult === null) { // N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá
            console.error(`[${roomId}] N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá t·ª´ ${player.id}: ${JSON.stringify(move)}`);
            socket.emit("invalidMove", { move, message: "N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá!" });
            // Kh·ªüi ƒë·ªông l·∫°i timer cho ng∆∞·ªùi ch∆°i hi·ªán t·∫°i v√¨ n∆∞·ªõc ƒëi kh√¥ng th√†nh c√¥ng
            startPlayerTimer(roomId);
            return;
        }

        // N∆∞·ªõc ƒëi h·ª£p l·ªá
        console.log(`[${roomId}] ‚úÖ N∆∞·ªõc ƒëi h·ª£p l·ªá b·ªüi ${player.id}:`, validMoveResult.san);
        room.history.push(validMoveResult); // L∆∞u n∆∞·ªõc ƒëi ƒë·∫ßy ƒë·ªß

        // C·∫≠p nh·∫≠t th·ªùi gian ban ƒë·∫ßu cho l∆∞·ª£t sau (ƒë√£ ƒë∆∞·ª£c t√≠nh trong stopPlayerTimer)

        const fen = game.fen();
        io.to(roomId).emit("opponentMove", { move: validMoveResult, fen }); // G·ª≠i n∆∞·ªõc ƒëi v√† FEN m·ªõi

        // Ki·ªÉm tra k·∫øt th√∫c game
        let gameOverHandled = false;
        if (game.isCheckmate()) {
             const winnerId = opponent.id; // Ng∆∞·ªùi v·ª´a ƒëi l√† ng∆∞·ªùi th·∫Øng
             const loserId = player.id;
             console.log(`[${roomId}] Checkmate! Winner: ${winnerId}`);
             io.to(roomId).emit("gameOver", { result: "win", winner: winnerId, loser: loserId, reason: "checkmate", message: `Ng∆∞·ªùi ch∆°i ${winnerId} th·∫Øng do chi·∫øu h·∫øt!` });
             gameOverHandled = true;
         } else if (game.isStalemate() || game.isDraw() || game.isInsufficientMaterial()) {
             console.log(`[${roomId}] Draw! Reason: ${game.isStalemate() ? "stalemate" : game.isInsufficientMaterial() ? "insufficient material" : "draw"}`);
             io.to(roomId).emit("gameOver", { result: "draw", reason: game.isStalemate() ? "stalemate" : game.isInsufficientMaterial() ? "insufficient material" : "draw", message: "V√°n c·ªù h√≤a!" });
             gameOverHandled = true;
         }

        // N·∫øu game ch∆∞a k·∫øt th√∫c, chuy·ªÉn l∆∞·ª£t v√† b·∫Øt ƒë·∫ßu timer m·ªõi
        if (!gameOverHandled) {
            room.turn = opponent.id; // Chuy·ªÉn l∆∞·ª£t sang ƒë·ªëi th·ªß
            // C·∫≠p nh·∫≠t th·ªùi gian g·ªëc cho l∆∞·ª£t m·ªõi c·ªßa ƒë·ªëi th·ªß
             if(opponent.color === 'white'){ room.initialWhiteTime = room.whiteTime; }
             else { room.initialBlackTime = room.blackTime; }
             console.log(`[${roomId}] ‚û° L∆∞·ª£t ti·∫øp theo: ${room.turn}, FEN sau: ${fen}`);
             io.to(roomId).emit("updateTurn", { turn: room.turn });
             startPlayerTimer(roomId); // B·∫Øt ƒë·∫ßu timer cho ng∆∞·ªùi ch∆°i ti·∫øp theo
        } else {
            // D·ªçn d·∫πp n·∫øu game ƒë√£ k·∫øt th√∫c
             stopPlayerTimer(roomId); // ƒê·∫£m b·∫£o timer ƒë√£ d·ª´ng h·∫≥n
             Object.values(room.rejoinTimeoutId).forEach(clearTimeout); // Clear m·ªçi timeout rejoin
             room.rejoinTimeoutId = {};
             console.log(`[${roomId}] Game ended. Rejoin timeouts cleared.`);
             // Kh√¥ng x√≥a ph√≤ng ngay l·∫≠p t·ª©c
        }
    });

    // --- Rejoin Logic ---
    socket.on("rejoinGame", ({ roomId, playerToken }) => {
        console.log(`[${roomId}] Y√™u c·∫ßu rejoin t·ª´ Token: ${playerToken}, Socket: ${socket.id}.`);
        const room = rooms[roomId];

        if (!room) { console.log(`[${roomId}] Rejoin Fail: Ph√≤ng kh√¥ng t·ªìn t·∫°i.`); socket.emit("rejoinFailed", { reason: "room_not_found", message: "Ph√≤ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ k·∫øt th√∫c." }); return; }
        const player = room.players.find(p => p.id === playerToken);
        if (!player) { console.log(`[${roomId}] Rejoin Fail: Token kh√¥ng h·ª£p l·ªá (${playerToken}).`); socket.emit("rejoinFailed", { reason: "invalid_token", message: "Th√¥ng tin ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá." }); return; }

        if (player.status !== 'disconnected') {
             console.log(`[${roomId}] Rejoin Info: Ng∆∞·ªùi ch∆°i ${playerToken} ƒëang ${player.status}. C·∫≠p nh·∫≠t socket ID n·∫øu c·∫ßn.`);
             if (player.currentSocketId !== socket.id) { player.currentSocketId = socket.id; socket.join(roomId); } // C·∫≠p nh·∫≠t socket v√† join l·∫°i ph√≤ng
             socket.emit("rejoinStatus", { message: `B·∫°n ƒëang ·ªü tr·∫°ng th√°i ${player.status}.`, currentStatus: player.status});
             // G·ª≠i l·∫°i tr·∫°ng th√°i game cho ng∆∞·ªùi ch∆°i n√†y ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô
             const opponent = room.players.find(p => p.id !== player.id);
              socket.emit("gameRejoined", {
                   color: player.color, turn: room.turn, roomId, playerToken: player.id,
                   fen: room.game.fen(), history: room.history,
                   whiteTime: room.whiteTime, blackTime: room.blackTime,
                   opponentStatus: opponent?.status ?? 'unknown'
               });
             return;
         }

        const disconnectTime = room.disconnectTime[player.id];
        if (disconnectTime && (Date.now() - disconnectTime > REJOIN_TIMEOUT)) {
             console.log(`[${roomId}] Rejoin Fail: H·∫øt ${REJOIN_TIMEOUT / 1000}s ch·ªù cho ${player.id}.`);
             socket.emit("rejoinFailed", { reason: "timeout_expired", message: "ƒê√£ h·∫øt th·ªùi gian ch·ªù ƒë·ªÉ k·∫øt n·ªëi l·∫°i." });
             // D·ªçn ph√≤ng n·∫øu timeout ch∆∞a k·ªãp ch·∫°y
              if (rooms[roomId]) {
                   const winner = room.players.find(p => p.id !== player.id);
                   io.to(roomId).emit("gameOver", { result: "win", winner: winner?.id, loser: player.id, reason: "abandoned", message: `Ng∆∞·ªùi ch∆°i ${winner?.id || 'Kh√¥ng x√°c ƒë·ªãnh'} th·∫Øng do ${player.id} tho√°t tr·∫≠n!` });
                   stopPlayerTimer(roomId); delete rooms[roomId]; console.log(`[${roomId}] Ph√≤ng x√≥a do timeout (ki·ªÉm tra trong rejoinGame).`);
              }
             return;
         }

        // --- Rejoin Success ---
        console.log(`[${roomId}] Rejoin check OK cho ${player.id}.`);
        if (room.rejoinTimeoutId[player.id]) { clearTimeout(room.rejoinTimeoutId[player.id]); delete room.rejoinTimeoutId[player.id]; console.log(`[${roomId}] Timeout rejoin ƒë√£ h·ªßy cho ${player.id}.`); }

        player.status = 'connected'; player.currentSocketId = socket.id; room.playerStatus[player.id] = 'connected'; delete room.disconnectTime[player.id];
        socket.join(roomId);
        console.log(`[${roomId}] ‚úÖ ${player.id} rejoin th√†nh c√¥ng v·ªõi socket ${socket.id}.`);

        const opponent = room.players.find(p => p.id !== player.id);
        socket.emit("gameRejoined", {
            color: player.color, turn: room.turn, roomId, playerToken: player.id,
            fen: room.game.fen(), history: room.history,
            whiteTime: room.whiteTime, blackTime: room.blackTime,
            opponentStatus: opponent?.status ?? 'unknown'
        });
        if (opponent && opponent.status === 'connected') { io.to(opponent.currentSocketId).emit("playerReconnected", { reconnectedPlayerId: player.id }); }

         // Kh·ªüi ƒë·ªông l·∫°i timer n·∫øu c·∫£ 2 c√πng connected
         if (opponent && opponent.status === 'connected') {
             console.log(`[${roomId}] Both players connected after rejoin. Ensuring timer runs.`);
              startPlayerTimer(roomId);
          } else {
              console.log(`[${roomId}] Timer not restarted after rejoin: Opponent (${opponent?.id}) is ${opponent?.status}.`);
          }
    });

    // --- Disconnect Handling ---
    socket.on("disconnect", (reason) => {
        console.log(`üî¥ Ng∆∞·ªùi ch∆°i ng·∫Øt k·∫øt n·ªëi: ${socket.id}. L√Ω do: ${reason}`);
        const queueIndex = matchQueue.findIndex(player => player.id === socket.id);
        if (queueIndex !== -1) { matchQueue.splice(queueIndex, 1); console.log(`[${socket.id}] ƒê√£ x√≥a kh·ªèi h√†ng ƒë·ª£i do disconnect.`); }

        let roomIdFound = null; let playerInfo = null;
        for (const id in rooms) {
             const room = rooms[id];
             const playerIndex = room.players.findIndex(p => p.currentSocketId === socket.id);
              if (playerIndex !== -1) { roomIdFound = id; playerInfo = room.players[playerIndex]; break; }
         }

        if (roomIdFound && playerInfo) {
            const room = rooms[roomIdFound];
            console.log(`[${roomIdFound}] Ng∆∞·ªùi ch∆°i ${playerInfo.id} (socket ${socket.id}) disconnected.`);

            if (!room.game.isGameOver() && playerInfo.status === 'connected') {
                 playerInfo.status = 'disconnected'; room.playerStatus[playerInfo.id] = 'disconnected'; room.disconnectTime[playerInfo.id] = Date.now();
                 stopPlayerTimer(roomIdFound); // D·ª´ng ƒë·ªìng h·ªì ngay

                 const opponent = room.players.find(p => p.id !== playerInfo.id);
                 if (opponent && opponent.status === 'connected') { io.to(opponent.currentSocketId).emit("opponentDisconnected", { disconnectedPlayerId: playerInfo.id }); }

                 if (!room.rejoinTimeoutId[playerInfo.id]) {
                      console.log(`[${roomIdFound}] B·∫Øt ƒë·∫ßu ${REJOIN_TIMEOUT / 1000}s timeout ch·ªù rejoin cho ${playerInfo.id}.`);
                      room.rejoinTimeoutId[playerInfo.id] = setTimeout(() => { 
                            const currentRoom = rooms[roomIdFound]; if (!currentRoom) return;
                             if (currentRoom.playerStatus[playerInfo.id] === 'disconnected') {
                                 console.log(`[${roomIdFound}] Timeout: ${playerInfo.id} kh√¥ng rejoin. Game over.`);
                                 const winner = currentRoom.players.find(p => p.id !== playerInfo.id);
                                 io.to(roomIdFound).emit("gameOver", { result: "win", winner: winner?.id, loser: playerInfo.id, reason: "abandoned", message: `Ng∆∞·ªùi ch∆°i ${winner?.id || 'Kh√¥ng x√°c ƒë·ªãnh'} th·∫Øng do ${playerInfo.id} tho√°t tr·∫≠n!` });
                                 stopPlayerTimer(roomIdFound); delete currentRoom.rejoinTimeoutId[playerInfo.id]; delete rooms[roomIdFound]; console.log(`[${roomIdFound}] Ph√≤ng x√≥a do b·ªè cu·ªôc (timeout).`);
                             } else { delete currentRoom.rejoinTimeoutId[playerInfo.id]; console.log(`[${roomIdFound}] Timeout h·ªßy cho ${playerInfo.id} v√¨ tr·∫°ng th√°i thay ƒë·ªïi.`); }
                       }, REJOIN_TIMEOUT);
                  }
            } else {
                if (playerInfo.status === 'connected') { // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ƒëang l√† connected
                     playerInfo.status = 'disconnected'; room.playerStatus[playerInfo.id] = 'disconnected'; room.disconnectTime[playerInfo.id] = Date.now();
                     console.log(`[${roomIdFound}] Player ${playerInfo.id} disconnected after game ended.`);
                 }
                 const allDisconnected = room.players.every(p => p.status === 'disconnected');
                 if (allDisconnected) { console.log(`[${roomIdFound}] C·∫£ hai ƒë√£ disconnect sau game over. X√≥a ph√≤ng.`); stopPlayerTimer(roomIdFound); Object.values(room.rejoinTimeoutId).forEach(clearTimeout); delete rooms[roomIdFound]; }
             }
        } else { console.log(`[${socket.id}] Disconnected player not in any active room.`); }
    });

    // --- Other Events (Chat, New Game) ---
    socket.on("sendMessage", ({ roomId, message }) => { 
         const room = rooms[roomId]; if (!room) return; const senderPlayer = room.players.find(p => p.currentSocketId === socket.id); if (!senderPlayer) return;
          const opponent = room.players.find(p => p.id !== senderPlayer.id);
          if (opponent && opponent.status === 'connected') { console.log(`[${roomId}] üí¨ ${senderPlayer.id}: ${message.message}`); io.to(opponent.currentSocketId).emit("receiveMessage", { sender: senderPlayer.id, message: message.message }); }
    });
});


// --- Cleanup Interval ---
setInterval(() => {
     const now = Date.now();
     console.log("Running cleanup task...");
     let deletedCount = 0;
     for (let roomId in rooms) {
         const room = rooms[roomId];
         let shouldDelete = false;
         const allDisconnected = room.players.every(p => p.status === 'disconnected');

         if (allDisconnected && room.game.isGameOver()) {
             const lastDisconnectTime = Math.max(0, ...Object.values(room.disconnectTime));
             if (now - lastDisconnectTime > 300000) { // 5 ph√∫t sau disconnect cu·ªëi c√πng (khi game ƒë√£ end)
                 console.log(`[${roomId}] D·ªçn ph√≤ng c≈© (c·∫£ 2 disconnected > 5 ph√∫t sau game over).`);
                 shouldDelete = true;
             }
         } else if (room.players.length === 0) {
              console.log(`[${roomId}] D·ªçn ph√≤ng kh√¥ng c√≥ ng∆∞·ªùi ch∆°i.`);
              shouldDelete = true;
         }

         if (shouldDelete) {
             stopPlayerTimer(roomId); // D·ª´ng timer n·∫øu c√≤n
             Object.values(room.rejoinTimeoutId).forEach(clearTimeout); // Clear timeout rejoin
             delete rooms[roomId];
             deletedCount++;
         }
     }
      if(deletedCount > 0) console.log(`Cleanup task finished. Deleted ${deletedCount} rooms.`);
 }, 300000); // Ch·∫°y m·ªói 5 ph√∫t

server.listen(5000, "0.0.0.0", () => {
    console.log("üöÄ M√°y ch·ªß ƒëang ch·∫°y tr√™n c·ªïng 5000");
});